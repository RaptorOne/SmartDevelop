<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="AddNewItemToProject" xml:space="preserve">
    <value>Add an new Item to this Project</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CaseSensitive" xml:space="preserve">
    <value>Case Sensitive</value>
  </data>
  <data name="ChooseProjectTemplate" xml:space="preserve">
    <value>Choose a Project Template</value>
  </data>
  <data name="CloseOpenProject" xml:space="preserve">
    <value>Closing the Open Project</value>
  </data>
  <data name="CreateAProject" xml:space="preserve">
    <value>Create a Project</value>
  </data>
  <data name="CreateNewProject" xml:space="preserve">
    <value>Create New Project</value>
  </data>
  <data name="DLG_OpenProjectMustBeClosedQuestion" xml:space="preserve">
    <value>To open a Project the current project must be closed. Do you wan't to continue?</value>
  </data>
  <data name="FileOpenError" xml:space="preserve">
    <value>File open Error</value>
  </data>
  <data name="Find" xml:space="preserve">
    <value>Find</value>
  </data>
  <data name="FindAndReplace" xml:space="preserve">
    <value>Search and Replace</value>
  </data>
  <data name="FindNext" xml:space="preserve">
    <value>Find Next</value>
  </data>
  <data name="Languages" xml:space="preserve">
    <value>Languages</value>
  </data>
  <data name="MatchWholeWord" xml:space="preserve">
    <value>Match whole Word</value>
  </data>
  <data name="NoActiveProjectCanHandleCreateANew" xml:space="preserve">
    <value>No active Project was found which can handle the file of type {0}. Do you wan't to create a new one and add this item to it?</value>
  </data>
  <data name="NoPluginCanHandleExtension" xml:space="preserve">
    <value>No Plugin knows how to handle {0} Extensions in the current Project!</value>
  </data>
  <data name="NoPluginCanHandleSelectedFile" xml:space="preserve">
    <value>No Plugin knows how to handle your selected file.</value>
  </data>
  <data name="OpenAItem" xml:space="preserve">
    <value>Open an Item</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="Presents" xml:space="preserve">
    <value>presents</value>
  </data>
  <data name="Ready" xml:space="preserve">
    <value>Ready...</value>
  </data>
  <data name="ReallyReplaceAll" xml:space="preserve">
    <value>Do you really want to replace all occurences of '{0}' with '{1}'?</value>
  </data>
  <data name="Recent" xml:space="preserve">
    <value>Recent Files</value>
  </data>
  <data name="RegularExpression" xml:space="preserve">
    <value>Regular Expression</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="Replace" xml:space="preserve">
    <value>Replace</value>
  </data>
  <data name="ReplaceAll" xml:space="preserve">
    <value>Replace All</value>
  </data>
  <data name="ReplaceWhit" xml:space="preserve">
    <value>Replace with:</value>
  </data>
  <data name="SearchIn" xml:space="preserve">
    <value>Search in:</value>
  </data>
  <data name="SearchUp" xml:space="preserve">
    <value>Search up</value>
  </data>
  <data name="SelectAFile" xml:space="preserve">
    <value>Select a file</value>
  </data>
  <data name="SelectProjectFolder" xml:space="preserve">
    <value>Select the project folder</value>
  </data>
  <data name="Templates" xml:space="preserve">
    <value>Templates</value>
  </data>
  <data name="TextToFind" xml:space="preserve">
    <value>Text to Find:</value>
  </data>
  <data name="UnknownFile" xml:space="preserve">
    <value>Unknown Filetype</value>
  </data>
  <data name="Wildcards" xml:space="preserve">
    <value>Wildcards</value>
  </data>
</root>